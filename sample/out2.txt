Logical Function Simplifier (Quine-McCluskey)
[*] Enter a logical function to be simplified
    (ex. "f(A, B, C) = A + BC + ~A~B + ABC" )
[*] Input: 
Sum of products form:
Truth Table: f = ~A~B~C~D~E~F + ~A~B~C~DE~F + ~A~B~CDE~F + ~A~B~CDEF + ~A~BC~D~E~F + ~A~BC~DE~F + ~A~BCD~E~F + ~A~BCDE~F + ~A~BCDEF + A~BC~D~EF
ABCDEF | f()
-------|----
000000 |  1
000001 |  0
000010 |  1
000011 |  0
000100 |  0
000101 |  0
000110 |  1
000111 |  1
001000 |  1
001001 |  0
001010 |  1
001011 |  0
001100 |  1
001101 |  0
001110 |  1
001111 |  1
010000 |  0
010001 |  0
010010 |  0
010011 |  0
010100 |  0
010101 |  0
010110 |  0
010111 |  0
011000 |  0
011001 |  0
011010 |  0
011011 |  0
011100 |  0
011101 |  0
011110 |  0
011111 |  0
100000 |  0
100001 |  0
100010 |  0
100011 |  0
100100 |  0
100101 |  0
100110 |  0
100111 |  0
101000 |  0
101001 |  1
101010 |  0
101011 |  0
101100 |  0
101101 |  0
101110 |  0
101111 |  0
110000 |  0
110001 |  0
110010 |  0
110011 |  0
110100 |  0
110101 |  0
110110 |  0
110111 |  0
111000 |  0
111001 |  0
111010 |  0
111011 |  0
111100 |  0
111101 |  0
111110 |  0
111111 |  0

Compressing ...
1-level compression:
COMPRESS(000000, 000010) = 0000x0
COMPRESS(000000, 001000) = 00x000
COMPRESS(000010, 000110) = 000x10
COMPRESS(000010, 001010) = 00x010
COMPRESS(001000, 001010) = 0010x0
COMPRESS(001000, 001100) = 001x00
COMPRESS(000110, 000111) = 00011x
COMPRESS(000110, 001110) = 00x110
COMPRESS(001010, 001110) = 001x10
COMPRESS(001100, 001110) = 0011x0
COMPRESS(000111, 001111) = 00x111
COMPRESS(001110, 001111) = 00111x
2-level compression:
COMPRESS(0000x0, 0010x0) = 00x0x0
COMPRESS(00x000, 00x010) = 00x0x0
COMPRESS(000x10, 001x10) = 00xx10
COMPRESS(00x010, 00x110) = 00xx10
COMPRESS(0010x0, 0011x0) = 001xx0
COMPRESS(001x00, 001x10) = 001xx0
COMPRESS(00011x, 00111x) = 00x11x
COMPRESS(00x110, 00x111) = 00x11x
3-level compression:

Prime implicants: 
A~BC~D~EF  ~A~B~D~F  ~A~BE~F  ~A~BC~F  ~A~BDE  

Result of simplifying:
f' = A~BC~D~EF + ~A~B~D~F + ~A~BC~F + ~A~BDE
