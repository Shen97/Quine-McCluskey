#
#
#   README
#

[*] Summary
 An implementation of Quine-McCluskey algorithm
 Simplification of logical expressions

[+] Requirements
    [+] Compile Time
        [*] Make
        [*] C++11 compiler
        [*] Boost C++ Libraries
            Almost all the libraries I use are header-only.
            But you need to build only boost_regex
            Go to www.boost.org and get the source code to build it
    [+] Run time
        [*] Nothing is needed. Just run it

[+] Tested environment
    [+] Compiler
        [*] gcc 4.6.3
        [*] clang version 3.2 (trunk 159072)
    [+] Operating System
        [*] Linux 3.2.0-26-generic-pae i686 GNU/Linux
    [+] Libraries
        [*] Boost C++ Libraries 1.49.0 / 1.50.0

[+] Supported form(s) of expression
    [*] White spaces are ignored
    [+] You should enter a expression following the forms below:
        [*] BNF (Backus-Naur Form)
      -------------------------------------------------------------------------------------------
        <supported>  ::= <func-name> (<var-decl>) = <expression>
        <func-name>  ::= [A-Za-z_-]+
        <var-decl>   ::= ([A-Z],)+ [A-Z]
        <expression> ::= <expression> + <expression> | <expression> + <term> | <term> + <term>
        <term>       ::= (\^?[A-Z])+
      -------------------------------------------------------------------------------------------

[*] Samples
    Input samples exist in sample/in[1-6].txt
    Also output of each samples are in sample/out[1-6].txt

[*] TODO
    Modify the simplifier for more optimization
    Support Verilog source code

